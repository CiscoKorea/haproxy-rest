global
 pidfile {{.PidFile}}
 log 127.0.0.1 local0
 log 127.0.0.1 local1 notice
 daemon
 maxconn 4096
 stats socket /tmp/haproxy.stats.sock level admin

 defaults
   log global
   mode http
   option dontlognull
   option redispatch
   option httplog

   retries 3
   maxconn 2000

   # slowloris protection: clients should send their full http request in the configured time
   timeout http-request 5s

   timeout connect 5000ms
   timeout client 50000ms
   timeout server 50000ms

listen stats :1988
   mode http
   stats enable
   stats uri /
   stats refresh 2s
   stats realm Haproxy\ Stats
   stats auth showme:showme

### BEGIN GENERATED SECTION ###
{{range .Frontends}}
frontend {{.Name}}
    bind {{.BindIp}}:{{.BindPort}}

    mode {{.Mode}}
    {{if .Options.HttpClose}} option http-server-close{{end}}

    ###
    #
    # Spike/Rate Limiting & Quota Management
    #
    # We use a stick table to keep track of TCP connections rates and bytes send out.
    # On these metrics we set rules to designate upper limits. When limits are hit
    # we reroute the traffic to a specific abusers backend

    {{if .HttpSpikeLimit.Rate }} # start HTTP spike limit generation

        stick-table type ip size 200k expire {{ .HttpSpikeLimit.ExpiryTime}} store http_req_rate({{ .HttpSpikeLimit.SampleTime}})

        # values below are specific to the backend
        # track the request and set ACL's
        tcp-request content  track-sc1 src
        acl marked_as_abuser  sc1_http_req_rate gt {{ .HttpSpikeLimit.Rate}}

        use_backend abusers if marked_as_abuser

    {{end}} # end HTTP spike limit generation

    {{if .TcpSpikeLimit.Rate }} # start TCP spike limit generation

        stick-table type ip size 200k expire {{ .TcpSpikeLimit.ExpiryTime}} store conn_rate({{ .TcpSpikeLimit.SampleTime}})

        # values below are specific to the backend
        # track the request and set ACL's
        tcp-request content  track-sc2 src
        acl marked_as_abuser  sc2_conn_rate gt {{ .TcpSpikeLimit.Rate}}

        use_backend abusers if marked_as_abuser

    {{end}} # end spike limit generation

    ###
    # ACL Management
    #

    {{range .ACLs}}
    acl {{.Name}} {{.Pattern}}
    use_backend {{.Backend}} if {{.Name}}
    {{end}}

    default_backend {{.DefaultBackend}}

{{end}}


{{range .Backends}}

backend {{.Name}}
    mode {{.Mode}}

   {{ if eq .Mode "http" }} balance roundrobin {{end}}
   {{ if eq .Mode "tcp" }} balance leastconn {{end}}
    option forwardfor
   {{ if eq .Mode "http" }} http-response set-header X-Vamp-Server %s {{end}}
   {{ if eq .Mode "http" }} cookie vamp_srv insert httponly maxidle 5m maxlife 1h {{end}}
{{$mode := .Mode}}{{range .BackendServers}}
	server {{.Name}} {{.Host}}:{{.Port}} {{if eq $mode "http" }} cookie {{.Name}} {{end}} weight {{.Weight}} maxconn {{.MaxConn}} {{if .Check}}check inter {{.CheckInterval}}{{end}} {{end}}
{{if .Options.AbortOnClose}} option abortonclose{{end}}
{{if .Options.AllBackups}} option allbackups{{end}}
{{if .Options.CheckCache}} option checkcache{{end}}
{{if .Options.ForwardFor}} option forwardfor{{end}}
{{if .Options.HttpClose}} option http-server-close{{end}}
{{if .Options.HttpCheck}} option httpchki{{end}}
{{if .Options.LdapCheck}} option ldap-check{{end}}
{{if .Options.MysqlCheck}} option mysql-check{{end}}
{{if .Options.PgsqlCheck}} option pgsql-check{{end}}
{{if .Options.RedisCheck}} option redis-check{{end}}
{{if .Options.SmtpCheck}} option smtpchk{{end}}
{{if .Options.SslHelloCheck}} option ssl-hello-chk{{end}}
{{if .Options.TcpKeepAlive}} option tcpka{{end}}
{{if .Options.TcpSmartAccept}} option tcp-smart-accept{{end}}
{{if .Options.TcpSmartConnect}}	option tcp-smart-connect{{end}}
{{if .Options.TcpLog}} option tcplog{{end}}
{{if .Options.Transparent}}	option transparent
{{end}}
{{end}}

### END GENERATED SECTION ###

backend abusers
    mode http
    errorfile 409 /tmp/500rate.http